
Tables:
1) District
2) DistrictContent
3) DistrictUpdateInstance
4) OwnerSummaryDistrict
5) Plots


Relationships
1) DistrictContent 1 : ~ District
2) District 1 : 1 DistrictUpdateInstance
3) District 1 : ~ OwnerSummaryDistrict
4) Plot 1 : ~ OwnerSummaryDistrict


Details:
1) As District get updated per night/Sync internal, the prior District data is retained for history comparision within the District table
So multiple version of district, each with unique DistrictUpdateInstance Key, same district_id, different District_key id( seems like waste on this)

2) When a nightly district Sync occurs:
	a) District Tbl : New district record is gerenated first per district - new DistrictUpdateInstance key added per district row.
	b) OwnerSummaryDistrict : new owner summary record generated per owner, for each district, matching new districtUpdateInstance, scanning the plot table (which should also be updated/sync before the district updates process starts) 

3) Identify the latest set of district updates, which will allow pull of matching set of owners summary records - for that specific instance,  supports new owners, and dropped owners per district. 
* Owners only drop out if also missing from history shown on table (so depending on current, - 1x week, -1x month)


Possible fix/improvements
1) Dont really need the DistrictUpdateInstance table currently, but might be useful in the future to record, instance run time details, maybe to eval changes between distrist updates to reduce repetitive load on system runtime.


=================================
DB Performance Tweaks:
=================================
1) Add rebuild of Indexes as nightly task.  (See "Sql Optimise 2022" word doc for details)
* Performance of SPROC sp_plot_IP_get, related to PlotArchive table, showing a high fragmentation of 98% meaning slow query responses using this index.
* Top tables perf improve by index rebuild : Citizen, Plot, PlotArchive, DistrictFund, OwnerCitizen


2) PlotArchive table
* Table populated with full set of plot can grow to a massive size :  TRON = 26,742,548

Current Usage (as of 2023/10/28):
* PlotDB.GetIP_Historic()  >> calling SP >> sp_plot_IP_get
  Use: Only claimed plots are required here - as unclaimed do not produce, therefore have no IP assigned to them and not used within Production History module.

Enhancement:
1) Remove all unclaimed plots from archive table
2) do not store unclaimed plots on nightly sync - plot archive process

Performance Conditions in sp_plot_archive
1) Only archive opened districts - where plots have a district ID.  Tron: 74646 plots with no district id,  BNB: 62240 plots with no district id,  ETH: 111,976 plots with no district id
		DistrictUpdateInstance DUI ON
		P.district_id = DUI.district_id AND
		CONVERT(date, P.last_updated) = CONVERT(date, DUI.update_time) ;


=====================================================
Archive Tables
=====================================================
1) PlotArchive					>> [sp_archive_plots]
2) OwnerSummaryDistrictArchive	>> [sp_owner_summary_district_archive]

When updated:
* Each nightly sync  [SyncWorld::SyncRun()]
	plotDB.ArchivePlots();
    districtManage.ArchiveOwnerSummaryDistrict();

Row Size of tables (as of 03/11/2023)
1) PlotArchive
	Tron: 12,840,667
	BNB: 664,858
	Eth: 7,669,278

2) OwnerSummaryDistrictArchive
	Tron: 2,741,923
	BNB: 90,516
	Eth: 2,494,626



======================================================
Database Connections
======================================================
Dev Env:
* root/appsettings.json
PRD Env:
* web.config

Data:
* 4 db connection settings (as per 2024/01)

DB Setting Assignment/Use
* MetaverseMaxDbContext.cs > init()		: Assigned to static class vars - used to generate the Sql Context based on World type.
* ServiceCommon.cs > AssignSetting()	: Not used currently
* Startup.cs > Startup()				: Not used currently