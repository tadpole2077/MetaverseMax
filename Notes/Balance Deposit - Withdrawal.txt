
Related Features:
* Wallet linking feature : See Owner_Sync.txt  : Used to link multiple wallets across worlds to ONE Universal account (and balance)


===========================================
Deposit/Withdraw Process Steps:
===========================================
Deposit:
-----------------------
1) depositMegaToMMBankWithAllowance()			>> File: balance-manage-dialog.component.ts
	calls ABI MCPMegaContract.methods.approve()

2) deposit()									>> File: balance-manage-dialog.component.ts
	calls ABI MMBankContract.methods.depositMega()

3) confirmTransaction()							>> File: balance-manage-dialog.component.ts
	calls WS >> /bank/confirmTransaction		>> File: bankManage.cs
		Using transaction hash, checks event log for that transaction
		If (1) deposit Event found on transaction (matching event sig)  
		and (2) transaction receipt matches MMBankContractAddress			
		and (3) Event using MMBank Contract address ( Prevent spoofing of deposit event log - using fake MMBank contract )



Withdrawal:
-----------------------
1) withdrawAllowanceApprove()					>> File: balance-manage-dialog.component.ts
	Called by withdraw button CLICK


2) walletSign(withdrawMegaAmountNumber)			>> File: balance-manage-dialog.component.ts
	Desc: Wallet sign matching amount and using : encrypted code combined with account details + amount + salt, produces a hashed signed code.
		This code is later used to approve the withdraw - unique to this transactoin.
	Calls:
		getWithdrawSignCode(amount)				>> File: balance-manage-dialog.component.ts  >> WS call to server returns long code chunk
	Requires: 
		Wallet confirm by user (no 1)

3) WS >> /bank/WithdrawAllowanceApprove
	Desc: passed the signed key - backend server checks key is valid and proceeds to approve the withdraw amount.
		

4) updateUserBankBalance()  
	Desc: calls WS /bank/GetBalance  and update the top manu balance component relating to total MM Mega balance user holds.

5) withdrawMegaFromMMBank()
	Desc: calls the MMBankContract.methods.withdrawMega(),  
	Requires: Wallet confirm by user (no 2)

6) confirmTransaction(transactionHash) : 
	Desc: calls WS /bank/confirmTransaction , which checks the transaction events on the server
		if transaction is correct contract, not processed before, then the withdraw transaction is recorded in the local db, and will show in the user [log tab]

7) checkBalances(true)
	Desc: update component balances, includes check to Mega contract to get new total held on owners wallet - used within deposit panal for max deposit range and display.


What-if Notes
a) User may cancal transaction at point 5 - causing transaction to freeze in intermediate state, MM balance will reduce, but user wallet will not receive tokens.
	User will need to Claim or Cancel to proceed with the withdraw transaction completion



Potential hack
- brute force multi signs for same withdraw amount, could result in duplicate allowance increase.  
	To protect against this, SPROC is used to table locks on OwnerUni, check table has sufficient balance, deduct withdraw and add new transaction record.

Improvement:
using locked stored sproc
- get 




Test Settings:
==============================
Deposit: 
* Step 1 >> Contract used is : CONTRACT_MEGA_MOCK & MegaCoinMOCKAbi    [ swap to using BNB contract on release ]
* Step 2 >> MMBankContract (MetaverseMax contract on BNB network) points to MEGA_MOCK Contract on testnet  [BNB>MMContract needs to be updated to use the BNB Mega contract on release]
