================================================================================================================
Owner / Account Sync
================================
Purpose:
* Find new owners from review of Plot
* Find new owners from reivew of District
* Create new ownsers
* Update owner name to latest - while retaining log of old owner name in db.


================================================================================================================
1) Nightly Data Sync - SPROC call
================================================================================================================
Sproc: sp_owner_sync
Process:
	1) Compare current Plot table with Owner Table, any owner_matic not in owner table then Create new owner account
	2) Update OwnerName for ALL account, Where ANY plot {owner_nickname, avatar_id) does not match latest OwnerName record for that account AND plot.owner_nickname is NOT NULL

Notes:
	1) Owner may remove name (no name assigned) - if any account plot has owner name as [empty string] and latest OwnerName is not [empty string], then new owner_name [empty string] is applied.
Limitations:
	1) Parcals, District owners may not have a plots



================================================================================================================
2) OwnerDB.NewOwner()
================================================================================================================
Called by:
	OwerNameDB.UpdateOwnerName()
	Called by:
		OwnerDataController.UnitTest_UpdateOwnerName()
		DistrictDB.UpdateDistrictByToken()			//  Called by nightly sync
		OwnerManage.SyncOwner()						//  Called by nightly sync  - note sp_owner_sync called just before it.
		OwnerManage.UpdateBalance()					//  Corner case call - in case balance owner not registerd yet.



================================================================================================================
3) Wallet links [2024]
================================================================================================================
Objective:
* Global account - with one-to-many link to wallet types (future proof - supporting xyz new blockchain)
* MaticLink table -  linking global account to matic key  paired with blockchain env.

Process:
- When: nightly sync, and any NewOwner method call
- Rule_1 : Check owner id (OwnerUni.owner_uni_id) has at least one link record - MaticKeyLink.
		   Action: Create link record if none found
		   When: (1)Nightly Sync, (2)Update District, (3)Owner balance change

- Rule_2 : Check each world db (owner) has a matching link record. if not create one per world. 
		   link to existing OwnerUni record. if none exists, then create a new record and assign key to link (owner_uni_id) 

Account Owner - Use Cases:
- Owner can wallet sign to attach related world account to a designated OwnerUni record.   
	- A co-sign is then required by an existing account to accept the account join.
	- Prior OwnerUni & link (if any) is removed.
	- Existing bb_balance(if any) is transfered to selected OwnerUni record.
	- Example:  owner has 1x account on each world but using separate wallets, each world will use a different matic key.  link matic keys to one OwnerUni account - sharing same BB_balance.
- Wallet Owner can also unlink wallet account from a uni(universe) joint account, therefore having a separate uni account and maticlink to that account (per world-wallet pair)


Calls:
1) OwnerManage.SyncOwner()  >> OwnerUniDB.CheckLink()											>> Nightly sync process
2) DistrictManage.UpdateAllDistricts() >> UpdateDistrictOwner() >> OwnerUniDB.CheckLink()		>> Test Web Service used to force update of all districts retrieved from REGIONS_LIST Tier-3 MCP WS
3) DistrictManage.UpdateDistrict() >> UpdateDistrictOwner() >> OwnerUniDB.CheckLink()			>> [Nightly sync] Web Service used to update ONE district retrieved from REGIONS_LIST Tier-3 MCP WS
4) OwnerManage.UpdateBalance() >> OwnerManage.UpdateBalance() >> OwnerUniDB.CheckLink()	


Universal Owner Account Behaviours
1) Control visibility of Balance within main toolbar, from single switch user setting
   Service: api/bnb/OwnerData/SetBalanceVisible?owner_matic_key=0xb197dc47fcbe7d7734b60fa87fd3b0ba0acaf441&balance_visible=true


Issues:
1) Out of Sync : Owner (owner_uni_id) does not match those found in MetaverseMax_UNI database - OwnerUni table
	How does it occur:  when restoring a copy of live database for use within dev env for testing.
	How to resolve: Call WS https://localhost:44360/api/bnb/ownerdata/SyncWorldOwnerAll
	Reolve Details: 
		One side effect of this call is that linked_wallet_count will increment by 1, not an issue in dev env but in live it would show incorrect count of linked wallets (dont expect this WS to be run in list beyond the initial runs)
		Typically this WS is ran once on release within each world. No future live db use envisaged at this time. Check logic again before using multiple times within live env.
